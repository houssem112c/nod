const evenement = require('../models/evenement');
const sydFunctions = require('../utils/syd-functions');

exports.getAllevenements = async (req, res, next) => {
    try {
        const list = await Evenement.find(); // Use "Evenement" instead of "evenement"
        res.status(200).json({ message: "List of evenements", list: list });
    } catch (error) {
        console.log('error', error);
        res.status(500).json({ message: 'Recovery failed!' });
    }
};

exports.getSingleevenements = async (req, res, next) => {
    const evenementId = req.params.evenementId;
    try {
        const evenement = await Evenement.findById(evenementId); 
        if (!evenement) {
            return res.status(404).json({ message: 'evenement not found!' });
        }
        res.status(200).json({ message: "Retrieved evenement", evenement: evenement });
    } catch (error) {
        console.log('error', error);
        res.status(500).json({ message: 'Recovery failed!' });
    }

};

exports.addevenement = async (req, res, next) => {
    const errorMessage = sydFunctions.validators(req, res);
    console.log('Retrieved errorMessage', errorMessage);
    if (errorMessage) {
        return res.status(422).json({ message: 'Validation error', error: errorMessage });
    }
    if (!req.file) {
        return res.status(422).json({ message: 'Please add an image!' });
    }

    const Evenement = new evenement({
        namee: req.body.namee,
        date: req.body.date,
        place: req.body.place,
        imagess: req.file.path.replace("\\", "/") // If you are on Linux or Mac just use req.file.path
    });

    try {
        const result = await Evenement.save()
        console.log('result', result);
        return res.status(201).json({
            message: "evenement is successfully added!",
            evenement: result
        });
    } catch (error) {
        console.log('error', error);
        if (req.file) {
            sydFunctions.deleteImage(evenement.imagess);
        }
        res.status(500).json({ message: 'Creation failed!' });
    }
};

exports.updateevenement = async (req, res, next) => {
    const errorMessage = sydFunctions.validators(req, res);
    console.log('Retrieved errorMessage', errorMessage);
    if (errorMessage) {
        return res.status(422).json({ message: 'Validation failed!', error: errorMessage });
    }

    let imagess = req.body.image;
    if (req.file) {
        imagess = req.file.path.replace("\\", "/");
    }
    if (!imagess) {
        return res.status(422).json({ message: 'Please add an image!' });
    }

    const evenementId = req.params.evenementId;
    try {
        const evenement = await evenement.findById(evenementId);
        if (!evenement) {
            sydFunctions.deleteImage(req.file.path.replace("\\", "/"));
            return res.status(404).json({ message: 'evenement not found!' });
        }
        if (imagess !== evenement.imagess) {
            sydFunctions.deleteImage(evenement.imagess);
        }
        evenement.namee = req.body.namee;
        evenement.date = req.body.date;
        evenement.place = req.body.place;
        evenement.imagess = imagess;
        const result = await evenement.save();
        res.status(200).json({ 'message': 'Modification successfully completed!', evenement: result });

    } catch (error) {
        console.log('error', error);
        if (req.file) {
            sydFunctions.deleteImage(evenement.imagess);
        }
        res.status(500).json({ message: 'Update failed!' });
    }

};

exports.deleteevenement = async (req, res, next) => {
    const EvenementId = req.params.evenementId;
    try {
        const Evenement = await evenement.findById(EvenementId);
        if (!Evenement) {
            return res.status(404).json({ message: 'evenement not found!' });
        }

        sydFunctions.deleteImage(Evenement.imagess);
        await evenement.findByIdAndRemove(EvenementId);
        res.status(200).json({ 'message': 'Deletion completed successfully!' });

    } catch (error) {
        console.log('error', error);
        res.status(500).json({ message: 'Delete failed!' });
    }
};

